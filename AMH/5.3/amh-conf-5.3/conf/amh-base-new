#!/bin/bash
export PATH=/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

function amh_init()
{
	MirrorGroup=(
		'amysql [USA,JP,ALL] http://code.amh.sh/files/'
		'amysql [USA,JP,ALL] http://code1.amh.sh/files/'
		'amysql [CN,ALL] http://code2.amh.sh/files/'
		'amysql [CN,ALL] http://code3.amh.sh/files/'
		'amysql [ALL] http://code4.amh.sh/files/'
		'amysql [ALL] http://code5.amh.sh/files/'
	);
	amh_v='5.3';
	api_s='http://amh.sh/api';
	amh_home='/root/amh';
	amh_www='/usr/local/amh-'${amh_v};
	amh_base_functions=`typeset -F`;

	echo '=============================================================';
	echo ' [Linux] AMH '${amh_v};
	echo ' http://amh.sh';
	echo '';
	[ "$1" != '' -a "$2" != '' ] && echo "[$1 $2]";
	echo '=============================================================';
	[ "$amh_uid" == '0' -a "$SSH_CLIENT" != '' ] && [ -d $amh_www/etc ] && date +%s >$amh_www/etc/lasttime.conf;
}

function amh_module()
{
	local module_name='';
	local module_action='';
	local module_param='';
	local webkey_array=();
	local action_arr=();

	# Download Moodule *********************************
	[ ! -d "${amh_home}/modules" ] && echo "[Error] ${amh_home}/modules not exist." && exit 1;
	if [ "$1" == 'download' ]; then
		module_name=$2;
		module_rup=$3;
		[ "$module_name" == '' ] && read -p "[Notice] Download new module, Please input name:" module_name \
		&& [ "$module_name" == '' ] && amh_module download;
		[ -d "${amh_home}/modules/${module_name}" ] && [ "$module_rup" == '' ] && echo "[Error] ${module_name} is already exist." && return 1;

		if [ -L "/bin/mysql" -a -f "${amh_www}/web/Amysql/Config.php" ]; then
		MysqlPass=`cat ${amh_www}/web/Amysql/Config.php | awk '{ FS="\047Password\047] = \047"; RS="\047;" } { print $2}' | sed '/^$/d'`;
		MysqlV=`cat ${amh_www}/etc/amh-base.conf | grep mysql`;
		for account_value in `mysql -uroot -p${MysqlPass} -S /tmp/${MysqlV}.sock -B -N -e "SET NAMES utf8;SELECT config_value FROM amh.amh_config WHERE config_name LIKE 'WebKey%' ORDER BY config_name DESC "`; do
			webkey_array[${#webkey_array[*]}+1]=$account_value;
		done;
		fi;

		module_name=${module_name// /};
		module_name=${module_name//\/};
		if [ "${webkey_array[5]}" == '' ]; then
			post_data_key='{"module_name":"'${module_name}'","amh_v":"'${amh_v}'"}';
		else
			post_data='{"username":"'${webkey_array[1]}'","uid":"'${webkey_array[2]}'", "webkey":"'${webkey_array[4]}'", "module_name":"'${module_name}'","amh_v":"'${amh_v}'"}';
			post_data_key=`echo $post_data | openssl enc -aes-256-cbc -salt -k ${webkey_array[5]} -base64`;
		fi;
		post_data_key=`amh_urlencode "$post_data_key"`;
		http_code=`curl -d "keydata=$post_data_key" -w %{http_code} --connect-timeout 5 --retry 3 -o ${amh_home}/modules/${module_name}.module.tar.gz ${api_s}/amh_module_download.htm`;
		if [ "$http_code" == '200' ]; then
			mkdir -p /tmp/amh.tmp/;
			[ -d "${amh_home}/modules/${module_name}" ] && mv ${amh_home}/modules/${module_name} /tmp/amh.tmp/;
			cd  ${amh_home}/modules/;
			tar -zxf ${amh_home}/modules/${module_name}.module.tar.gz && chmod -R 775 ${amh_home}/modules/${module_name} \
			&& echo "[OK] ${module_name} download success.";
			status=$?;
			rm -f ${amh_home}/modules/${module_name}.module.tar.gz;
			[ "$status" == '1' ] && [ -d "/tmp/amh.tmp/${module_name} " ] && mv -f /tmp/amh.tmp/${module_name} ./;
			rm -rf /tmp/amh.tmp/;
			if [ -f "${module_name}/AMHScript.php" ]; then
				mkdir -p ${amh_www}/web/Class/modules/${module_name};
				\cp ${module_name}/AMHScript.php  ${amh_www}/web/Class/modules/${module_name};
				[ -d "${module_name}/data" ] && \cp -a ${module_name}/data ${amh_www}/web/Class/modules/${module_name};
			fi;
			return $status;
		fi;
		rm -f ${amh_home}/modules/${module_name}.module.tar.gz;
		echo "[Error] Download Failed: ${module_name}.tar.gz (${http_code})";
		return 1;
	fi;


	# Management Moodule *********************************
	[ `ls ${amh_home}/modules | wc -w` == "0" ] && echo "[Notice] ${amh_home}/modules is empty." && exit 1;
	if [ "$*" != ''	]; then
		module_name=$1;
		module_action=$2;
		module_param=`echo "$*" | cut -d ' ' -f3-`;
	else
		[ "$amh_uid" != '0' ] && echo 'exit(403,1)' && exit 1;
		[ "$SSH_CLIENT" == '' ] && echo 'exit(403,2)' && exit 1;
		echo "[AMH] Please select module: "
		select module_name in `ls /root/amh/modules/`; do break; done;
	fi;

	module_name=`amh_dir_filter $module_name`;
	if [ ! -f "${amh_home}/modules/${module_name}/AMHScript" -a ! -f "${amh_home}/modules/${module_name}/AMHScript.php" ]; then
		module_list=`ls	${amh_home}/modules | grep ^$module_name-.* `;
		if [ "$?" == '0' ]; then
			for line in $module_list; do
				amh $line $module_action $module_param;
			done;
		else
			amh_module;
		fi;
		return;
	else
		# action-list *****************************
		if [ -f "${amh_home}/modules/${module_name}/AMHScript" ]; then
			source ${amh_home}/modules/${module_name}/AMHScript;
			action_arr[0]='info';
			while read line; do
				fname=`echo $line | cut -d' ' -f3`;
				if [ "$fname" != 'amh_module_delete' ]; then
					if ! echo $amh_base_functions | grep $fname >/dev/null; then
						action_arr[${#action_arr[*]}+1]=${fname/amh_module_/};
					fi;
				else
					exist_delete_function='yes';
				fi;
			done <<- EOT
			`typeset -F`
			EOT
		fi;

		action_arr[${#action_arr[*]}+1]='delete';
		action_arr[${#action_arr[*]}+1]='exit';

		if [ "$module_action" == '' ]; then
			[ "$amh_uid" != '0' ] && echo 'exit(400,1)' && exit 1;
			[ "$SSH_CLIENT" == '' ] && echo 'exit(400,2)' && exit 1;
			echo "[Notice] $module_name module management, please select: " \
			&& select module_action in ${action_arr[*]}; do break; done;
		fi;
		
		
		# boot-options ****************************
		[ "$module_action" == 'exit' ] && exit;
		if [ "$module_action" == 'boot' ]; then
			if echo "${action_arr[*]}" | grep 'boot' >/dev/null; then
				amh_module_boot;
				return $?;
			else
				echo "[Notice] $module_name No boot-options.";
				return 1;
			fi;
		fi;

		for line in ${action_arr[*]}; do
			if [ "$module_action" == "$line" ]; then

				if echo "$ModuleNeedParamFunctions" | grep $module_action >/dev/null; then
					[ "$module_param" == '' ] && read -p "[Notice] Please input param []:" module_param
				fi;

				[ "$module_action" != 'init' ] && echo "${action_arr[*]}" | grep 'init' >/dev/null && amh_module_init $module_param;
				if [ "$module_action" == 'delete' ]; then
					if amh_module_status 2>/dev/null; then
						echo "[Error] $module_name module is running, please uninstall first and then delete it.";
						return 1;
					else
						rm -rf ${amh_www}/web/Class/modules/${module_name}/;
						rm -rf ${amh_home}/modules/$module_name/;
						echo "[OK] ${module_name} deleted success.";
						status=$?;
						if [ "$exist_delete_function" == 'yes' ]; then
							amh_module_delete $module_param;
							return $?;
						fi;
						return $status;
					fi;
				fi;

				if echo "$module_action" | grep 'install' >/dev/null; then
					amh_module_$module_action $module_param | tee /tmp/${module_name}_${module_action}_process.log;
					rm -f /tmp/${module_name}_${module_action}_process.log;
					amh_module_status >/dev/null;
					status=$?;
					if [ "$module_action" == 'uninstall' ]; then
						return $[$[$status-1]*-1];
					fi;
					return $status;
				else
					amh_module_$module_action $module_param;
					return $?;
				fi;
				return 1;
			fi;
		done;
		amh_module $module_name;
		return;
	fi;
}
#info
function amh_module_info()
{
	echo 'AMH-ModuleName: '${ModuleName};
	echo 'AMH-ModuleSort: '${ModuleSort};
	echo 'AMH-ModuleType: '${ModuleType};
	echo 'AMH-ModuleMainVersion: '${ModuleMainVersion};
	echo 'AMH-ModuleVersion: '${ModuleVersion};
	echo 'AMH-ModuleDescription: '${ModuleDescription};
	echo 'AMH-ModuleInstallPath: '${ModuleInstallPath};
	echo 'AMH-ModuleSbin: '${ModuleSbin};
	echo 'AMH-ModuleDate: '${ModuleDate};
	echo 'AMH-ModuleWebSite: '${ModuleWebSite};
	echo 'AMH-ModuleIco: '${ModuleIco};
	echo 'AMH-ModuleScriptBy: '${ModuleScriptBy};
	echo 'AMH-ModuleNeedParamFunctions: '${ModuleNeedParamFunctions};
	echo 'AMH-ModuleProcessTag: '${ModuleProcessTag};
	echo 'AMH-ModuleProcessFunctions: '${ModuleProcessFunctions};
	echo 'AMH-ModuleNotProcessFunctions: '${ModuleNotProcessFunctions};
	echo 'AMH-ModuleInstallFunctions: '${ModuleInstallFunctions};
	echo 'AMH-ModuleNotInstallFunctions: '${ModuleNotInstallFunctions};
	echo 'AMH-ModuleExtFunctions: '${ModuleExtFunctions};
	echo 'AMH-ModuleVid: '${ModuleVid};
}


function amh_wget()
{
	local mirror='1';
	local MirrorUrl=();
	local MirrorSpeed=();
	local FastestMirror=();
	local i=0;
	local FileName=$1;
	local FileMD5=$2;
	local TimeOut=1;
	local TestSize=81200;
	local ServerLocation;
	[ "$3" != '' ] && TimeOut=$3;
	[ "$4" != '' ] && TestSize=$4;
	FileMD5=`echo $FileMD5 | tr '[A-Z]' '[a-z]'`;

	[ -f /root/amh/conf/location.conf ] && ServerLocation=`grep -Eo '\[.+\]' /root/amh/conf/location.conf | tr -d '[]'`;
	if ! echo $FileName | egrep '^http[s]?:.*' >/dev/null; then
		[ "${#MirrorGroup[@]}" == '0' ] && echo "[Error] Download Failed : ${FileName}" && return 1;
		printf "[AMH] Download ${FileName} checking fastest mirror, Please Wait ..";
		for line in "${MirrorGroup[@]}"; do
			echo "$line" | grep -Eo '\[.+\]' | grep -iq "$ServerLocation" && MirrorUrl[$i]=`echo $line | cut -d ']' -f2` && i=$[$i+1];
		done;
		[ "${#MirrorUrl[@]}" == '0' ] && echo -e "\n[Error] Download Failed : ${FileName}" && return 1;

		i=0;
		for line in "${MirrorUrl[@]}"; do
			printf '.';
			MirrorSpeed[$i]=`curl -r 0-$TestSize -m $TimeOut -s -L -w '%{speed_download}' ${line}${FileName} -o /dev/null`;
			MirrorSpeed[$i]="${MirrorSpeed[$i]} ${i}\n";
			i=$[$i+1];
		done;
		FastestMirror=`echo -e "${MirrorSpeed[@]}" | sort -nr`;
		mirror=`echo ${FastestMirror[*]} | cut -d ' ' -f2 | head -1`;

		FileNameLast=`echo $FileName | awk -F "/" '{print $NF}' | awk -F '?' '{print $1}'`;
		rm -f ${FileNameLast};
		wget ${MirrorUrl[$mirror]// /}${FileName} -O ${FileNameLast};

		DownFileMD5=`md5sum $FileNameLast | cut -d ' ' -f1`;
		if [ "$DownFileMD5" != "$FileMD5" ]; then
			rm -f ${FileNameLast};
			echo ${MirrorUrl[$mirror]// /}${FileName};
			echo "[Error] MD5 sum mismatch : ${FileNameLast}. ";
			echo '=============================================================';
			echo '';
			unset MirrorGroup[$mirror];
			MirrorGroup=("${MirrorGroup[@]}");
			amh_wget $FileName $FileMD5 $TimeOut $TestSize;
		fi;
	else
		OldIFS=$IFS;
		IFS='|';
		IFS=',';
		set -- $FileName;

		i=0;
		printf "[AMH] Download ${FileName} checking fastest mirror, Please Wait ..";
		for line in $*; do
			printf '.';
			MirrorUrl[$i]=$line;
			MirrorSpeed[$i]=`curl -r 0-$TestSize -m $TimeOut -s -L -w '%{speed_download}' ${line} -o /dev/null`;
			MirrorSpeed[$i]="${MirrorSpeed[$i]} ${i}\n";
			i=$[$i+1];
		done;
		FastestMirror=`echo -e "${MirrorSpeed[@]}" | sort -nr`;
		echo '';
		mirror=`echo ${FastestMirror[*]} | cut -d ' ' -f2 | head -1`;
		FileName=`echo "$FileName" | cut -d ',' -f $[mirror+1]`;
		IFS=$OldIFS;

		FileNameLast=`echo $FileName | awk -F "/" '{print $NF}' | awk -F '?' '{print $1}'`;
		rm -f ${FileNameLast};
		wget $FileName -O ${FileNameLast};

		DownFileMD5=`md5sum $FileNameLast | cut -d ' ' -f1`;
		if [ "$DownFileMD5" != "$FileMD5" ]; then
			rm -f ${FileNameLast};
			echo $FileName;
			echo "[Error] MD5 sum mismatch : ${FileNameLast}. ";
			echo '=============================================================';
			echo '';
			unset MirrorUrl[$mirror];
			FileName=`echo "${MirrorUrl[@]}" | sed 's# #,#g'`;
			[ "$FileName" == '' ] && return 1;
			amh_wget $FileName $FileMD5 $TimeOut $TestSize;
		fi;
	fi;
	
}

function amh_urlencode() 
{
  local string="$1";
  local strlen=${#string};
  local encoded="";

  for (( pos=0 ; pos<strlen ; pos++ )); do
     c=${string:$pos:1}
     case "$c" in
        [-_.~a-zA-Z0-9] ) o="${c}" ;;
        * ) printf -v o '%%%02x' "'$c"
     esac
     encoded+="${o}";
  done
  echo "${encoded}";
}

function amh_is_redhat()
{
	# egrep -i "centos" /etc/issue || egrep -i "red hat|redhat" /proc/version;
	whereis -b yum | grep '/yum' >/dev/null;
	return $?;
}

function amh_is_64bit()
{
	[ `getconf WORD_BIT` == '32' ] && [ `getconf LONG_BIT` == '64' ];
	return $?;
}

function amh_make_install()
{
	local CpuNum=`cat /proc/cpuinfo | grep 'processor' | wc -l`;
	make -j ${CpuNum};
	make install;
}

function amh_yum_install()
{
	! amh_is_redhat && return;
	for line in $*; do
		echo "[${line} Installing] ************************************************** >>";
		yum -y install $line;
	done;
}

function amh_apt_install()
{
	amh_is_redhat && return;
	for line in $*; do
		echo "[${line} Installing] ************************************************** >>";
		apt-get -y install $line;
	done;
}

function amh_get_param()
{
	[ "$1" == '' ] || [ "$2" == '' ] && return;
	amh_module "$1" info | grep "$2" | cut -d ":" -f2- | sed "s/ //";
}

function amh_pid_status()
{
	ps -A | awk '{print $1}' | grep -w "$1" >/dev/null;
	return $?;
}

function amh_dir_filter()
{
	echo $1 | sed -e 's#\.\.##g' -e 's#/##g' -e 's#:##g';
}


amh_init $*;
amh_module $*;
amh_status=$?
exit $amh_status;